// Code generated by mockery v2.53.4. DO NOT EDIT.

package easydb

import (
	context "context"

	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// MockTx is an autogenerated mock type for the Tx type
type MockTx struct {
	mock.Mock
}

type MockTx_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTx) EXPECT() *MockTx_Expecter {
	return &MockTx_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function with given fields: ctx
func (_m *MockTx) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTx_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Commit(ctx interface{}) *MockTx_Commit_Call {
	return &MockTx_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockTx_Commit_Call) Run(run func(ctx context.Context)) *MockTx_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTx_Commit_Call) Return(_a0 error) *MockTx_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_Commit_Call) RunAndReturn(run func(context.Context) error) *MockTx_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *MockTx) Exec(ctx context.Context, query string, args ...interface{}) (pgconn.CommandTag, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) pgconn.CommandTag); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTx_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockTx_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockTx_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockTx_Exec_Call {
	return &MockTx_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockTx_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockTx_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTx_Exec_Call) Return(_a0 pgconn.CommandTag, _a1 error) *MockTx_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTx_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (pgconn.CommandTag, error)) *MockTx_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, dest, query, args
func (_m *MockTx) Get(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTx_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockTx_Expecter) Get(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockTx_Get_Call {
	return &MockTx_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockTx_Get_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *MockTx_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTx_Get_Call) Return(_a0 error) *MockTx_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_Get_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *MockTx_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuerier provides a mock function with no fields
func (_m *MockTx) GetQuerier() pgxquerier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQuerier")
	}

	var r0 pgxquerier
	if rf, ok := ret.Get(0).(func() pgxquerier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgxquerier)
		}
	}

	return r0
}

// MockTx_GetQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuerier'
type MockTx_GetQuerier_Call struct {
	*mock.Call
}

// GetQuerier is a helper method to define mock.On call
func (_e *MockTx_Expecter) GetQuerier() *MockTx_GetQuerier_Call {
	return &MockTx_GetQuerier_Call{Call: _e.mock.On("GetQuerier")}
}

func (_c *MockTx_GetQuerier_Call) Run(run func()) *MockTx_GetQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_GetQuerier_Call) Return(_a0 pgxquerier) *MockTx_GetQuerier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_GetQuerier_Call) RunAndReturn(run func() pgxquerier) *MockTx_GetQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// NamedExec provides a mock function with given fields: ctx, query, arg
func (_m *MockTx) NamedExec(ctx context.Context, query string, arg interface{}) (pgconn.CommandTag, error) {
	ret := _m.Called(ctx, query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedExec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (pgconn.CommandTag, error)); ok {
		return rf(ctx, query, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) pgconn.CommandTag); ok {
		r0 = rf(ctx, query, arg)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, query, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTx_NamedExec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedExec'
type MockTx_NamedExec_Call struct {
	*mock.Call
}

// NamedExec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - arg interface{}
func (_e *MockTx_Expecter) NamedExec(ctx interface{}, query interface{}, arg interface{}) *MockTx_NamedExec_Call {
	return &MockTx_NamedExec_Call{Call: _e.mock.On("NamedExec", ctx, query, arg)}
}

func (_c *MockTx_NamedExec_Call) Run(run func(ctx context.Context, query string, arg interface{})) *MockTx_NamedExec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockTx_NamedExec_Call) Return(_a0 pgconn.CommandTag, _a1 error) *MockTx_NamedExec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTx_NamedExec_Call) RunAndReturn(run func(context.Context, string, interface{}) (pgconn.CommandTag, error)) *MockTx_NamedExec_Call {
	_c.Call.Return(run)
	return _c
}

// NamedGet provides a mock function with given fields: ctx, dest, query, arg
func (_m *MockTx) NamedGet(ctx context.Context, dest interface{}, query string, arg interface{}) error {
	ret := _m.Called(ctx, dest, query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedGet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, interface{}) error); ok {
		r0 = rf(ctx, dest, query, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_NamedGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedGet'
type MockTx_NamedGet_Call struct {
	*mock.Call
}

// NamedGet is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - arg interface{}
func (_e *MockTx_Expecter) NamedGet(ctx interface{}, dest interface{}, query interface{}, arg interface{}) *MockTx_NamedGet_Call {
	return &MockTx_NamedGet_Call{Call: _e.mock.On("NamedGet", ctx, dest, query, arg)}
}

func (_c *MockTx_NamedGet_Call) Run(run func(ctx context.Context, dest interface{}, query string, arg interface{})) *MockTx_NamedGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockTx_NamedGet_Call) Return(_a0 error) *MockTx_NamedGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_NamedGet_Call) RunAndReturn(run func(context.Context, interface{}, string, interface{}) error) *MockTx_NamedGet_Call {
	_c.Call.Return(run)
	return _c
}

// NamedSelect provides a mock function with given fields: ctx, dest, query, arg
func (_m *MockTx) NamedSelect(ctx context.Context, dest interface{}, query string, arg interface{}) error {
	ret := _m.Called(ctx, dest, query, arg)

	if len(ret) == 0 {
		panic("no return value specified for NamedSelect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, interface{}) error); ok {
		r0 = rf(ctx, dest, query, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_NamedSelect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NamedSelect'
type MockTx_NamedSelect_Call struct {
	*mock.Call
}

// NamedSelect is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - arg interface{}
func (_e *MockTx_Expecter) NamedSelect(ctx interface{}, dest interface{}, query interface{}, arg interface{}) *MockTx_NamedSelect_Call {
	return &MockTx_NamedSelect_Call{Call: _e.mock.On("NamedSelect", ctx, dest, query, arg)}
}

func (_c *MockTx_NamedSelect_Call) Run(run func(ctx context.Context, dest interface{}, query string, arg interface{})) *MockTx_NamedSelect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockTx_NamedSelect_Call) Return(_a0 error) *MockTx_NamedSelect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_NamedSelect_Call) RunAndReturn(run func(context.Context, interface{}, string, interface{}) error) *MockTx_NamedSelect_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *MockTx) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTx_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter) Rollback(ctx interface{}) *MockTx_Rollback_Call {
	return &MockTx_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockTx_Rollback_Call) Run(run func(ctx context.Context)) *MockTx_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTx_Rollback_Call) Return(_a0 error) *MockTx_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_Rollback_Call) RunAndReturn(run func(context.Context) error) *MockTx_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: ctx, dest, query, args
func (_m *MockTx) Select(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTx_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockTx_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *MockTx_Expecter) Select(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockTx_Select_Call {
	return &MockTx_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockTx_Select_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *MockTx_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockTx_Select_Call) Return(_a0 error) *MockTx_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_Select_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *MockTx_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTx creates a new instance of MockTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTx {
	mock := &MockTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
